#include <Wire.h>
#include "MAX30100_PulseOximeter.h"

#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>


#define TFT_CS         8
#define TFT_DC         9
#define TFT_RST        10

#define REPORTING_PERIOD_MS     1000


Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

PulseOximeter pox;

uint32_t tsLastReport = 0;

volatile boolean beatDetect = false;


const unsigned char heart [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x7e, 0x00, 0x03, 0xec, 0xc7, 0x00,
        0x07, 0xe7, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80,
        0x07, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0x00,
        0x01, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
        0x00, 0x1f, 0xe0, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char O2 [] PROGMEM = {

        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x01, 0xe3, 0xc0, 0x00,
        0x01, 0xc1, 0xc0, 0x00, 0x03, 0x80, 0xc0, 0x00, 0x03, 0x80, 0xee, 0x00, 0x03, 0x80, 0xff, 0x00,
        0x03, 0x80, 0xf3, 0x00, 0x01, 0x81, 0xc6, 0x00, 0x01, 0xe3, 0xcc, 0x00, 0x00, 0xff, 0x9e, 0x00,
        0x00, 0x3e, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



void onBeatDetected()
{
    Serial.println("Beat!");
    beatDetect = true;
}

void setup()
{

    tft.initR(INITR_144GREENTAB);
    tft.fillScreen(ST77XX_WHITE);
    tft.setTextColor(ST77XX_BLACK);
    tft.setTextSize(2);
    tft.drawBitmap(0, 30, heart, 30, 30, ST77XX_RED);
    tft.drawBitmap(0, 60, O2, 30, 30, ST77XX_BLUE);

    delay(100);

    Serial.begin(115200);

    Serial.print("Initializing pulse oximeter..");


    if (!pox.begin()) {
        Serial.println("FAILED");
        for(;;);
    } else {
        Serial.println("SUCCESS");
    }


    pox.setOnBeatDetectedCallback(onBeatDetected);


}

void loop()
{
    pox.update();

    if (millis() - tsLastReport > REPORTING_PERIOD_MS)
    {
        if(beatDetect==true)
        {
            static int heartRate;
            static int spO2;
            eraseText(heartRate, spO2);
            heartRate = pox.getHeartRate();
            spO2 = pox.getSpO2();

            Serial.print("Heart rate:");
            Serial.print(heartRate);
            Serial.print("bpm / SpO2:");
            Serial.print(spO2);
            Serial.println("%");
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(30,35);
            tft.print(heartRate);
            tft.print("bpm");
            tft.setCursor(30,65);
            tft.print(spO2);
            tft.print("%");

            tsLastReport = millis();
            beatDetect=false;

        }

    }
}


void eraseText(int heartRate, int spO2)
{
    tft.setTextColor(ST77XX_WHITE);
    tft.setCursor(30,35);
    tft.print(heartRate);
    tft.print("bpm");
    tft.setCursor(30,65);
    tft.print(spO2);
    tft.print("%");

}