package.install('dplyr')
install.packages('dplyr')
package.install('ggplot2')
package.install('ggplot')
install.packages("ggplot2")
employee <- read.csv("exployees_kr.csv")
employee <- read.csv("employees_kr.csv")
employee <- read.csv("employees.csv")
getwd()
employee <- read.csv("employee.csv")
head(employee)
employee <- read.scv("employees_kr.csv")
employee <- read.csv("employees_kr.csv")
head(employee)
sub2008 <- subset(employee, employee$Year == 2008)
hist(sub2008$Incentive)
sub2009 <- subset(employee, employee$Year == 2009)
hist(sub2009$Incentive)
subMan <- subset(employee, employee$Sex == "M")
subWoman <- subset(employee, employees$Year == "F")
subWoman <- subset(employee, employee$Year == "F")
hist(subMan$Incentive)
hist(subWoman$Incentive)
hist(subWomon$Incentive)
hist(subWoman$Incentive)
subWoman
subWoman <- subset(employee, employee$Sex == "F")
hist(subWoman$Incentive)
employee <- read.csv("employees_kr.csv")
#Difference in incentive increase rate depending on whether negotiated or not
subNego <- subset(employee, employee$Nego == "TRUE")
subNoNego <- subset(employee, employee$Nego == "FALSE")
hist(subNego$Incentive)
hist(subNoNego$Incentive)
sample(1:10, 5, replace=TRUE, prob=c(10,22,3,4,5,6,7,8,9,10))
sample(1:10, 5, replace=TRUE, prob=c(10,22,3,4,5,6,7,8,9,10))
sample(1:10, 10, replace=TRUE, prob=c(10,22,3,4,5,6,7,8,9,10))
sample(1:10, 10, replace=TRUE, prob=c(10,22,3,4,5,6,7,8,9,10))
sample(1:10, 10, replace=TRUE, prob=c(10,22,3,4,5,6,7,8,9,10))
sample(1:10, 10, replace=TRUE, prob=c(10,22,3,4,5,6,7,8,9,10))
sample(1:10, 10, replace=TRUE, prob=c(100,22,3,4,5,6,7,8,9,10))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,0))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,1))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,10))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,10))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,10))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,10))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,10))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,10))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,50))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,50))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,50))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,50))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,50))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,75))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,75))
sample(1:10, 10, replace=TRUE, prob=c(100,0,0,0,0,0,0,0,0,75))
install.packages("sampling")
library(sampling)
salary <- read.csv("regdata.csv")
head(salary)
plot(salary$Incentive[salary$negotiated==TRUE], salary$Salary[salary$negotiated==TRUE])
plot(salary$Incentive[salary$negotiated==TRUE])
plot(salary$Incentive[salary$negotiated==TRUE], salary$Salary[salary$negotiated==TRUE])
dpois
dpois(3, 5)
dpois(4, 5)
dpois(5, 5)
dpois(5, 4)
dpois(100, 2)
dpois(100, 5)
dpois(100, 20)
dpois(100, 100)
dpois(100, 5000)
dpois(100, 500)
dpois(100, 500)
plot(density(rnorm(1000000, 0, 10)))
plot(density(rnorm(1000000, 5, 10)))
plot(density(rnorm(1000000, 100, 10)))
plot(density(rnorm(1000000, 200, 10)))
plot(density(rnorm(1000000, 0, 5)))
plot(density(rnorm(1000000, 0, 50)))
plot(density(rnorm(1000000, 0, 60)))
plot(density(rnorm(1000000, 0, 200)))
plot(density(rnorm(1000000, 0, 500)))
plot(density(rnorm(1000000, 0, 1)))
plot(density(rnorm(1000000, 0, 200)))
plot(density(rnorm(1000000, 0, 100)))
plot(density(rnorm(1000000, 0, 20)))
plot(density(rnorm(1000000, 0, 20)))
plot(density(rnorm(1000000, 0, 20)))
plot(density(rnorm(1000000, 0, 20)))
plot(density(rnorm(1000000, 0, 20)))
plot(dpois(x=c(0,1,2,3,4,5,6,7,8,9,10), lambda=3), type='h')
plot(dpois(x=c(0,1,2,3,4,5,6,7,8,9,10), lambda=8), type='h')
plot(dpois(x=c(0,1,2,3,4,5,6,7,8,9,10), lambda=12), type='h')
rnorm(4,mean=3, sd=3)
y <- rnorm(200)
hist(y)
a <- c(980, 1008, 968, 1032, 1012, 996, 1021, 1002, 996, 1017)
shapiro.test(a)
plot(a)
plot(a.h)
hist(a)
mean(a)
t.test(a, mu=1000, alternative="two.sided")
t.test(a, mu=1000, alternative="two.sided")
t.test(a, mu=1003, alternative="two.sided")
t.test(a, mu=1000, alternative="two.sided")
t.test(a, mu=900, alternative="two.sided")
t.test(a, mu=980, alternative="two.sided")
t.test(a, mu=980, alternative="two.sided")
t.test(a, mu=1003, alternative="two.sided")
t.test(a, mu=1003, alternative="two.sided")
data(iris)
rm =
data(iris)
rm = list(ls)
rm = list=ls()
rm(list=ls())
data(iris)
str(iris)
temp <- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))
temp
iris.training <- iris[temp]
iris.training <- iris[temp,]
View(iris.training)
iris.testing <- iris[-temp,]
library(nnet)
neuralNetResult <- nnet(Spacies~.. data=iris.training, size=3, decay=0)
neuralNetResult <- nnet(Spacies~., data=iris.training, size=3, decay=0)
neuralNetResult <- nnet(Species~., data=iris.training, size=3, decay=0)
neuralNetResult
View(iris.training)
summary(neuralNetResult)
pred <- predict(neuralNetResult, iris.testing, type ="class")
pred
real <- iris.testing$Species
table(real, pred)
temp <- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))
data(iris)
str(iris)
temp <- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))
temp
iris.training <- iris[temp,]
iris.testing <- iris[-temp,]
library(nnet)
neuralNetResult <- nnet(Species~., data=iris.training, size=3, decay=0)
neuralNetResult
summary(neuralNetResult)
pred <- predict(neuralNetResult, iris.testing, type ="class")
pred
real <- iris.testing$Species
table(real, pred)
data(iris)
str(iris)
temp <- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))
temp
iris.training <- iris[temp,]
iris.testing <- iris[-temp,]
library(nnet)
neuralNetResult <- nnet(Species~., data=iris.training, size=3, decay=0)
neuralNetResult
summary(neuralNetResult)
pred <- predict(neuralNetResult, iris.testing, type ="class")
pred
real <- iris.testing$Species
table(real, pred)
data(iris)
str(iris)
temp <- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))
temp
iris.training <- iris[temp,]
iris.testing <- iris[-temp,]
library(nnet)
neuralNetResult <- nnet(Species~., data=iris.training, size=3, decay=0)
neuralNetResult
summary(neuralNetResult)
pred <- predict(neuralNetResult, iris.testing, type ="class")
pred
real <- iris.testing$Species
table(real, pred)
data(iris)
str(iris)
temp <- c(sample(1:50, 30), sample(51:100, 30), sample(101:150, 30))
temp
iris.training <- iris[temp,]
iris.testing <- iris[-temp,]
library(nnet)
neuralNetResult <- nnet(Species~., data=iris.training, size=3, decay=0)
neuralNetResult
summary(neuralNetResult)
pred <- predict(neuralNetResult, iris.testing, type ="class")
pred
real <- iris.testing$Species
table(real, pred)
kmeans_result <- kmeans(kris2, 3)
iris2 <- iris
iris2$Species <- NULL
iris2
kmeans_result <- kmeans(kris2, 3)
kmeans_result <- kmeans(iris2, 3)
kmeans_result
kmeans_result <- kmeans(iris2, 5)
kmeans_result
kmeans_result <- kmeans(iris2, 1)
kmeans_result
kmeans_result <- kmeans(iris2, 2)
kmeans_result
kmeans_result <- kmeans(iris2, 8)
kmeans_result
kmeans_result <- kmeans(iris2, 10)
kmeans_result
kmeans_result <- kmeans(iris2, 20)
kmeans_result
kmeans_result <- kmeans(iris2, 500)
kmeans_result <- kmeans(iris2, 30)
kmeans_result <- kmeans(iris2, 500)
kmeans_result
kmeans_result <- kmeans(iris2, 50)
kmeans_result
iris2
kmeans_result <- kmeans(iris2, 150)
kmeans_result <- kmeans(iris2, 140)
kmeans_result
plot(iris2[c("Sepal.Length". "Sepal.Width")], col=kmeans_result)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 3)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 2)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 4)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result
kmeans_result <- kmeans(iris2, 5)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 2)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 3)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 4)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 4)
kmeans_result
kmeans_result <- kmeans(iris2, 4)
kmeans_result
kmeans_result <- kmeans(iris2, 4)
kmeans_result
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 4)
kmeans_result
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 4)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 4)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 4)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
kmeans_result <- kmeans(iris2, 4)
plot(iris2[c("Sepal.Length", "Sepal.Width")], col=kmeans_result$cluster)
$nc
install.packages("fpc")
library(fpc)
pamk_result <- pamk(iris2)
pamk_result
pamk_result$nc
table(pamk_result$pamobject)
table(pamk_result$pamobject$clustering, iris$Species)
layout(matrix(c(1,2),1,2))
plot(pamk_result$pamobject)
